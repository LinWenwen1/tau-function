#H1
kk=-23
q=3

L=[]
for i in range(len(divisors(396))):
    if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
        L.append(divisors(396)[i]+1)
print(q,'L=',L)

#求cl
f = Newforms(2^5*abs(kk)*q, names='a')
for i in range(10):
    C=f[i].padded_list(200)#求系数
    clf=[]
    for j in range(len(L)):
        l=L[j]
        clf.append(C[l])
    print('clf=',clf)

    l=5
    cl=clf[0]
    BS=[1,2,3,4]
    BT=[2,1,2,0]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    D1=sorted(set(D1),key=D1.index)
    #print("D1",D1)

    G5=[]
    for b in range(396):
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G5.append(b)
    print("G5=",G5)



    l=7
    cl=clf[1]
    BS=[1, 2, 3, 4 ,5, 6]
    BT=[2, 4, 0, 1, 0, 0]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    #print("D1",D1)


    G7=[]
    for k in range(len(G5)):
        b=G5[k]
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
                G7.append(b)
    print("G7",G7)
    
    l=13
    cl=clf[2]
    BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    BT=[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    #print("D1",D1)


    G13=[]
    for k in range(len(G7)):
        b=G7[k]
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
                G13.append(b)
    print("G13",G13)

    l=19
    cl=clf[3]
    BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
    BT=[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    #print("D1",D1)


    G19=[]
    for k in range(len(G13)):
        b=G13[k]
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
                G19.append(b)
    print("G19",G19)


3 L= [5, 7, 13, 19, 37, 67, 199]
clf= [-2, -2, 6, 4, 8, -8, 18]
G5= []
G7 []
G13 []
G19 []
clf= [0, 0, -2, 2, -4, 2, 8]
G5= []
G7 []
G13 []
G19 []
clf= [0, 2, 2, 2, -6, -2, 22]
G5= []
G7 []
G13 []
G19 []
clf= [2, -2, -2, -8, 4, -4, 2]
G5= [1, 5, 9, 13, 17, 21, 25, 29, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 345, 349, 353, 357, 361, 365, 369, 373, 377, 381, 389, 393]
G7 []
G13 []
G19 []
clf= [4, -4, 6, 2, 4, 10, -20]
G5= []
G7 []
G13 []
G19 []
clf= [-2, 2, 6, -4, 8, 8, -18]
G5= []
G7 []
G13 []
G19 []
clf= [0, -2, 2, -2, -6, 2, -22]
G5= []
G7 []
G13 []
G19 []
clf= [0, 0, -2, -2, -4, -2, -8]
G5= []
G7 []
G13 []
G19 []
clf= [2, 2, -2, 8, 4, 4, -2]
G5= [1, 5, 9, 13, 17, 21, 25, 29, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 213, 217, 221, 225, 229, 233, 237, 241, 245, 249, 257, 261, 265, 269, 273, 277, 281, 285, 289, 293, 301, 305, 309, 313, 317, 321, 325, 329, 333, 337, 345, 349, 353, 357, 361, 365, 369, 373, 377, 381, 389, 393]
G7 []
G13 []
G19 []
clf= [4, 4, 6, -2, 4, -10, 20]
G5= []
G7 []
G13 []
G19 []