#H1
kk=7
q=29
L=[]
for i in range(len(divisors(396))):
    if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
        L.append(divisors(396)[i]+1)
print(q,'L=',L)

C=[[-2,6],[-2,-2],[-2,-2],[-1,-4],[0,-2],[0,6],[1,0],[2,-2],[2,-6]]
for n in range(len(C)):
    clf=C[n]
    print(n,clf)

    l=3
    cl=clf[0]
    BS=[1, 2]#B5中s的值
    BT=[2, 0]#B5中t的值
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,3*s^11-2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^4-3*s^11*t^2+s^22)
        D1.append(d)
    #print("D1",D1)

    G3=[]
    for b in range(396):
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G3.append(b)
    print("G3",G3)

    l=13
    cl=clf[1]
    BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    BT=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^4-3*s^11*t^2+s^22)
        D1.append(d)
    D1=sorted(set(D1),key=D1.index)
    #print("D1",D1)


    G13=[]
    for k in range(len(G3)):
        b=G3[k]
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G13.append(b)
    print("G13",G13)
    
29 L= [3, 13, 19, 23, 37, 67, 199]
0 [-2, 6]
G3 []
G13 []
1 [-2, -2]
G3 []
G13 []
2 [-2, -2]
G3 []
G13 []
3 [-1, -4]
G3 []
G13 []
4 [0, -2]
G3 []
G13 []
5 [0, 6]
G3 []
G13 []
6 [1, 0]
G3 []
G13 []
7 [2, -2]
G3 []
G13 []
8 [2, -6]
G3 []
G13 []