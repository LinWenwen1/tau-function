kk=-3
q=19
L=[]
for i in range(len(divisors(396))):
    if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
        L.append(divisors(396)[i]+1)
print(q,'L=',L)

f = Newforms(2^3*5*abs(kk)*q, names='a')
for i in range(10):
    C=f[i].padded_list(200)#求系数
    clf=[]
    for j in range(len(L)):
        l=L[j]
        clf.append(C[l])
    print('clf=',clf)

    l=7
    cl=clf[0]
    BS=[1, 2, 3, 4, 5, 6]#B5中s的值
    BT=[2, 4, 0, 1, 0, 0]#B5中t的值
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,3*s^11-2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^4-3*s^11*t^2+s^22)
        D1.append(d)
    #print("D1",D1)

    G7=[]
    for b in range(396):
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G7.append(b)
    print("G7",G7)

    l=13
    cl=clf[1]
    BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    BT=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^4-3*s^11*t^2+s^22)
        D1.append(d)
    D1=sorted(set(D1),key=D1.index)
    #print("D1",D1)


    G13=[]
    for k in range(len(G7)):
        b=G7[k]
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G13.append(b)
    #G13=sorted(set(G13),key=G13.index)
    print("G13",G13)

19 L= [7, 13, 23, 37, 67, 199]
clf= [0, -2, 4, -2, 4, 16]
G7 []
G13 []
clf= [0, 2, -4, 10, 4, 16]
G7 []
G13 []
clf= [2, -2, 4, -10, -4, 4]
G7 []
G13 []
clf= [2, 4, 4, 8, 8, -20]
G7 []
G13 []
clf= [-2, -2, 8, 6, -4, 4]
G7 []
G13 []
clf= [0, -2, 8, -10, 4, 24]
G7 []
G13 []
clf= [-2, -4, 0, -8, -8, 4]
G7 []
G13 []
clf= [0, -2, 0, 6, 4, 0]
G7 []
G13 []
clf= [4, 2, 4, 10, 4, -24]
G7 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394]
G13 [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392]
clf= [4, 2, 0, 2, -4, 24]
G7 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394]
G13 [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392]




kk=-3
q=19
l=23
cl=4
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[5,7,10,11,14,15,17,19,20,21,22,1,2,3,4,6,8,9,12,13,16,18,1,2,3,4,6,8,9,12,13,16,18]
BT=[0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,3*s^11-2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)


G13=[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392]
G23=[]
for k in range(len(G13)):
    b=G13[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G23.append(b)
print("G23=",G23)

G23= []






kk=-3
q=19
l=23
cl=0
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[5,7,10,11,14,15,17,19,20,21,22,1,2,3,4,6,8,9,12,13,16,18,1,2,3,4,6,8,9,12,13,16,18]
BT=[0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,3*s^11-2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)


G13=[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 224, 228, 232, 236, 240, 244, 248, 252, 256, 260, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392]
G23=[]
for k in range(len(G13)):
    b=G13[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G23.append(b)
print("G23=",G23)

G23=[]









求H3
kk=-3
q=19
L=[]
for i in range(len(divisors(396))):
    if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
        L.append(divisors(396)[i]+1)
print(q,'L=',L)

f = Newforms(2^3*5*abs(kk)*q, names='a')
for i in range(10):
    C=f[i].padded_list(200)#求系数
    clf=[]
    for j in range(len(L)):
        l=L[j]
        clf.append(C[l])
    print('clf=',clf)

    l=7
    cl=clf[0]
    BS=[1, 2, 3, 4, 5, 6]#B5中s的值
    BT=[2, 4, 0, 1, 0, 0]#B5中t的值
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^4-3*s^11*t^2+s^22)
        D1.append(d)
    #print("D1",D1)

    G7=[]
    for b in range(396):
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G7.append(b)
    print("G7",G7)

    l=13
    cl=clf[1]
    BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
    BT=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^4-3*s^11*t^2+s^22)
        D1.append(d)
    D1=sorted(set(D1),key=D1.index)
    #print("D1",D1)


    G13=[]
    for k in range(len(G7)):
        b=G7[k]
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G13.append(b)
    #G13=sorted(set(G13),key=G13.index)
    print("G13",G13)

19 L= [7, 13, 23, 37, 67, 199]
clf= [0, -2, 4, -2, 4, 16]
G7 []
G13 []
clf= [0, 2, -4, 10, 4, 16]
G7 []
G13 []
clf= [2, -2, 4, -10, -4, 4]
G7 []
G13 []
clf= [2, 4, 4, 8, 8, -20]
G7 []
G13 []
clf= [-2, -2, 8, 6, -4, 4]
G7 []
G13 []
clf= [0, -2, 8, -10, 4, 24]
G7 []
G13 []
clf= [-2, -4, 0, -8, -8, 4]
G7 []
G13 []
clf= [0, -2, 0, 6, 4, 0]
G7 []
G13 []
clf= [4, 2, 4, 10, 4, -24]
G7 []
G13 []
clf= [4, 2, 0, 2, -4, 24]
G7 []
G13 []