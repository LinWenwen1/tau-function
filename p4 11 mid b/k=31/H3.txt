#H3
kk=31
Q=[3]
for n in range(len(Q)):
    q=Q[n]
    L=[]
    for i in range(len(divisors(396))):
        if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
            L.append(divisors(396)[i]+1)
    print(q,'L=',L)
    
    f = Newforms(2^3*5*abs(kk), names='a')
    for i in range(7):
        C=f[i].padded_list(200)#求系数
        clf=[]
        for j in range(len(L)):
            l=L[j]
            clf.append(C[l])
        print('clf=',clf)

        l=7
        cl=clf[0]
        BS=[1, 2, 3, 4, 5, 6]
        BT=[2, 4, 0, 1, 0, 0]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G7=[]
        for b in range(396):
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G7.append(b)
        print("G7",G7)

        l=23
        cl=clf[3]
        BS=[5, 7, 10, 11, 14, 15, 17, 19, 20, 21, 22, 1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18, 1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18]
        BT=[0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,2,2,2,2,2,2,2,2,2]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G23=[]
        for k in range(len(G7)):
            b=G7[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G23.append(b)
        print("G23",G23)

3 L= [7, 13, 19, 23, 37, 67, 199]
clf= [0, -2, 1, 0, 3, 2, 16]
G7 []
G23 []
clf= [2, -2, 1, -4, -1, 8, 10]
G7 []
G23 []
clf= [0, 2, -8, -2, -10, 12, -12]
G7 []
G23 []
clf= [0, 2, 4, 4, 2, -12, 0]
G7 []
G23 []
clf= [-4, 4, 4, 2, 8, 8, -20]
G7 [11, 33, 55, 77, 99, 121, 143, 165, 187, 209, 231, 253, 275, 297, 319, 341, 363, 385]
G23 []
clf= [0, 4, 4, 6, 0, -4, 4]
G7 []
G23 []
clf= [2, -2, 1, 4, 3, 8, 2]
G7 []
G23 []






#H3
kk=31
Q=[5]
for n in range(len(Q)):
    q=Q[n]
    L=[]
    for i in range(len(divisors(396))):
        if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
            L.append(divisors(396)[i]+1)
    print(q,'L=',L)
    
    f = Newforms(2^3*5*abs(kk), names='a')
    for i in range(7):
        C=f[i].padded_list(200)#求系数
        clf=[]
        for j in range(len(L)):
            l=L[j]
            clf.append(C[l])
        print('clf=',clf)

        l=3
        cl=clf[0]
        BS=[1, 2]#B5中s的值
        BT=[2, 0]#B5中t的值
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G3=[]
        for b in range(396):
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G3.append(b)
        print("G3",G3)

        l=7
        cl=clf[1]
        BS=[1, 2, 3, 4, 5, 6]#B5中s的值
        BT=[2, 4, 0, 1, 0, 0]#B5中t的值
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G7=[]
        for k in range(len(G3)):
            b=G3[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G7.append(b)
        print("G7",G7)

        l=23
        cl=clf[4]
        BS=[5, 7, 10, 11, 14, 15, 17, 19, 20, 21, 22, 1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18, 1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18]
        BT=[0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,2,2,2,2,2,2,2,2,2]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G23=[]
        for k in range(len(G7)):
            b=G7[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G23.append(b)
        print("G23",G23)

5 L= [3, 7, 13, 19, 23, 37, 67, 199]
clf= [-1, 0, -2, 1, 0, 3, 2, 16]
G3 []
G7 []
G23 []
clf= [-1, 2, -2, 1, -4, -1, 8, 10]
G3 []
G7 []
G23 []
clf= [0, 0, 2, -8, -2, -10, 12, -12]
G3 []
G7 []
G23 []
clf= [0, 0, 2, 4, 4, 2, -12, 0]
G3 []
G7 []
G23 []
clf= [2, -4, 4, 4, 2, 8, 8, -20]
G3 []
G7 []
G23 []
clf= [2, 0, 4, 4, 6, 0, -4, 4]
G3 []
G7 []
G23 []
clf= [3, 2, -2, 1, 4, 3, 8, 2]
G3 []
G7 []
G23 []






#H3
kk=31
Q=[7]
for n in range(len(Q)):
    q=Q[n]
    L=[]
    for i in range(len(divisors(396))):
        if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
            L.append(divisors(396)[i]+1)
    print(q,'L=',L)
    
    f = Newforms(2^3*5*abs(kk), names='a')
    for i in range(7):
        C=f[i].padded_list(200)#求系数
        clf=[]
        for j in range(len(L)):
            l=L[j]
            clf.append(C[l])
        print('clf=',clf)

        l=3
        cl=clf[0]
        BS=[1, 2]
        BT=[2, 0]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G3=[]
        for b in range(396):
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G3.append(b)
        print("G3",G3)

        l=13
        cl=clf[1]
        BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
        BT=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G13=[]
        for k in range(len(G3)):
            b=G3[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G13.append(b)
        print("G13",G13)

        l=19
        cl=clf[2]
        BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]
        BT=[0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 17, 18, 0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G19=[]
        for k in range(len(G13)):
            b=G13[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G19.append(b)
        print("G19",G19)

        l=23
        cl=clf[3]
        BS=[5, 7, 10, 11, 14, 15, 17, 19, 20, 21, 22, 1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18, 1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18]
        BT=[0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,2,2,2,2,2,2,2,2,2,2]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-3*s^11+2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G23=[]
        for k in range(len(G19)):
            b=G19[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G23.append(b)
        print("G23",G23)

7 L= [3, 13, 19, 23, 37, 67, 199]
clf= [-1, -2, 1, 0, 3, 2, 16]
G3 []
G13 []
G19 []
G23 []
clf= [-1, -2, 1, -4, -1, 8, 10]
G3 []
G13 []
G19 []
G23 []
clf= [0, 2, -8, -2, -10, 12, -12]
G3 [11, 33, 55, 77, 99, 121, 143, 165, 187, 209, 231, 253, 275, 297, 319, 341, 363, 385]
G13 [11, 55, 99, 143, 187, 231, 275, 319, 363]
G19 [11, 55, 99, 143, 187, 231, 275, 319, 363]
G23 []
clf= [0, 2, 4, 4, 2, -12, 0]
G3 [11, 33, 55, 77, 99, 121, 143, 165, 187, 209, 231, 253, 275, 297, 319, 341, 363, 385]
G13 [11, 55, 99, 143, 187, 231, 275, 319, 363]
G19 [11, 55, 99, 143, 187, 231, 275, 319, 363]
G23 []
clf= [2, 4, 4, 2, 8, 8, -20]
G3 []
G13 []
G19 []
G23 []
clf= [2, 4, 4, 6, 0, -4, 4]
G3 []
G13 []
G19 []
G23 []
clf= [3, -2, 1, 4, 3, 8, 2]
G3 []
G13 []
G19 []
G23 []