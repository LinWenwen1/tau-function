kk=-3
Q=[19,29,31]
for n in range(3):
    q=Q[n]
    L=[]
    for i in range(len(divisors(396))):
        if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=5 and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
            L.append(divisors(396)[i]+1)
    print(q,'L=',L)
    
    f = Newforms(2^3*5*abs(kk), names='a')
    for i in range(len(f)):
        C=f[i].padded_list(200)#求系数
        clf=[]
        for j in range(len(L)):
            l=L[j]
            clf.append(C[l])
        print('clf=',clf)

        l=7
        cl=clf[0]
        BS=[1, 2, 3, 4, 5, 6]#B5中s的值
        BT=[2, 4, 0, 1, 0, 0]#B5中t的值
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,3*s^11-2*t^2,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        #print("D1",D1)

        G7=[]
        for b in range(396):
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G7.append(b)
        print("G7",G7)

        l=13
        cl=clf[1]
        BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
        BT=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        Est=[]
        F11=Integers(11)
        for i in range(len(BS)):
            s=BS[i]
            t=BT[i]
            E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
            Est.append(E)
        #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


        C1S=[]
        C1T=[]
        for j in range(len(Est)):
            F=GF(l)
            Est1=EllipticCurve(F,Est[j])
            alE=l+1-Est1.cardinality()#计算al（Est1）
            result=F11(alE-cl)
            if result==0:#判断Norm条件
                C1S.append(BS[j])
                C1T.append(BT[j])
                #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
        #print("C1S",C1S,"C1T",C1T)


        D1=[]
        for i in range(len(C1S)):
            s=C1S[i]
            t=C1T[i]
            d=Integers(l)(t^4-3*s^11*t^2+s^22)
            D1.append(d)
        D1=sorted(set(D1),key=D1.index)
        #print("D1",D1)


        G13=[]
        for k in range(len(G7)):
            b=G7[k]
            if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
                G13.append(b)
        #G13=sorted(set(G13),key=G13.index)
        print("G13",G13)

19 L= [7, 13, 23, 37, 67, 199]
clf= [4, -6, -8, -6, -4, 0]
G7 [0, 22, 44, 66, 88, 110, 132, 154, 176, 198, 220, 242, 264, 286, 308, 330, 352, 374]
G13 [0, 44, 88, 132, 176, 220, 264, 308, 352]
clf= [0, 6, 0, -2, 4, 0]
G7 []
G13 []
29 L= [7, 13, 19, 23, 37, 67, 199]
clf= [4, -6, 4, -8, -6, -4, 0]
G7 [0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319, 330, 341, 352, 363, 374, 385]
G13 [0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319, 330, 341, 352, 363, 374, 385]
clf= [0, 6, -4, 0, -2, 4, 0]
G7 []
G13 []
31 L= [7, 13, 19, 23, 37, 67, 199]
clf= [4, -6, 4, -8, -6, -4, 0]
G7 [0, 22, 44, 66, 88, 110, 132, 154, 176, 198, 220, 242, 264, 286, 308, 330, 352, 374]
G13 [0, 44, 88, 132, 176, 220, 264, 308, 352]
clf= [0, 6, -4, 0, -2, 4, 0]
G7 []
G13 []





kk=-3
q=19
l=23
cl=-8
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[5,7,10,11,14,15,17,19,20,21,22,1,2,3,4,6,8,9,12,13,16,18,1,2,3,4,6,8,9,12,13,16,18]
BT=[0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)


G13=[0, 44, 88, 132, 176, 220, 264, 308, 352]
G23=[]
for k in range(len(G13)):
    b=G13[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
            G23.append(b)
print("G23=",G23)

G23= []





kk=-3
q=31
l=19
cl=4
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] 
BT=[0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 17, 18, 0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
     
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)

G13=[0, 44, 88, 132, 176, 220, 264, 308, 352]
G19=[]
for k in range(len(G13)):
    b=G13[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
        G19.append(b)
print("G19",G19)

G19 [0, 44, 88, 132, 176, 220, 264, 308, 352]


kk=-3
q=31
l=23
cl=-8
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[5,7,10,11,14,15,17,19,20,21,22,1,2,3,4,6,8,9,12,13,16,18,1,2,3,4,6,8,9,12,13,16,18]
BT=[0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)


G19=[0, 44, 88, 132, 176, 220, 264, 308, 352]
G23=[]
for k in range(len(G19)):
    b=G19[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
            G23.append(b)
print("G23=",G23)

G23= []






kk=-3
q=29
l=19
cl=4
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] 
BT=[0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 0, 1, 2, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 17, 18, 0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
     
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)

G13=[0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319, 330, 341, 352, 363, 374, 385]
G19=[]
for k in range(len(G13)):
    b=G13[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
        G19.append(b)
print("G19",G19)

G19 [0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319, 330, 341, 352, 363, 374, 385]




kk=-3
q=29
l=23
cl=-8
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[5,7,10,11,14,15,17,19,20,21,22,1,2,3,4,6,8,9,12,13,16,18,1,2,3,4,6,8,9,12,13,16,18]
BT=[0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,-2*t^2+3*s^11,0,t^4-3*s^11*t^2+s^22,0]#代入s和t得到的椭圆曲线
    Est.append(E)
#print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
#print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^4-3*s^11*t^2+s^22)
    D1.append(d)
D1=sorted(set(D1),key=D1.index)
#print("D1",D1)


G19=[0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231, 242, 253, 264, 275, 286, 297, 308, 319, 330, 341, 352, 363, 374, 385]
G23=[]
for k in range(len(G19)):
    b=G19[k]
    if Integers(4)(kk*q^b)==1 and Integers(11)(b)==0 and Integers(l)(kk*q^b) in D1:
            G23.append(b)
print("G23=",G23)

G23= []