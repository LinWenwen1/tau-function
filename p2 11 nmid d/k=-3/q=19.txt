kk=-3
q=19

L=[]
for i in range(len(divisors(396))):
    if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
        L.append(divisors(396)[i]+1)
print(q,'L=',L)

#求cl
f = Newforms(2^5*abs(kk)*q, names='a')
for m in range(12):
    C=f[m].padded_list(200)#求系数
    clf=[]
    for j in range(len(L)):
        l=L[j]
        clf.append(C[l])
    print(m,'clf=',clf)

    l=5
    cl=clf[0]
    BS=[1,2,3,4]
    BT=[2,1,2,0]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    D1=sorted(set(D1),key=D1.index)
    #print("D1",D1)

    G5=[]
    for b in range(396):
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G5.append(b)
    print("G5=",G5)



    l=7
    cl=clf[1]
    BS=[1,2,3,4,5,6]#B5中s的值
    BT=[2,4,0,1,0,0]#B5中t的值
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    #print("D1",D1)


    G7=[]
    for k in range(len(G5)):
        b=G5[k]
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
                G7.append(b)
    print("G7",G7)

19 L= [5, 7, 13, 23, 37, 67, 199]
0 clf= [-2, 4, 2, 4, 2, 4, 12]
G5= []
G7 []
1 clf= [-1, -1, 0, 8, 4, -2, -17]
G5= []
G7 []
2 clf= [-1, 1, 4, 0, 4, 14, 17]
G5= []
G7 []
3 clf= [0, 0, 0, -6, 8, -8, -16]
G5= [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
G7 []
4 clf= [2, -4, -2, -6, -6, -4, 0]
G5= [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
G7 [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
5 clf= [3, -3, 0, 0, -4, 10, 5]
G5= []
G7 []
6 clf= [-2, -4, 2, -4, 2, -4, -12]
G5= []
G7 []
7 clf= [-1, -1, 4, 0, 4, -14, -17]
G5= []
G7 []
8 clf= [-1, 1, 0, -8, 4, 2, 17]
G5= []
G7 []
9 clf= [0, 0, 0, 6, 8, 8, 16]
G5= [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
G7 []
10 clf= [2, 4, -2, 6, -6, 4, 0]
G5= [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
G7 []
11 clf= [3, 3, 0, 0, -4, -10, -5]
G5= []
G7 []



kk=-3
q=19
l=13
cl=-2
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
BT=[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
    Est.append(E)
print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^2-s^11)
    D1.append(d)
print("D1",D1)


G7=[1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
G13=[]
for k in range(len(G7)):
    b=G7[k]
    if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G13.append(b)
print("G13=",G13)

Est [[0, 0, 0, -1, 0], [0, 4, 0, 3, 0], [0, 6, 0, 8, 0], [0, 8, 0, 15, 0], [0, 10, 0, 24, 0], [0, 12, 0, 35, 0], [0, 14, 0, 48, 0], [0, 16, 0, 63, 0], [0, 18, 0, 80, 0], [0, 20, 0, 99, 0], [0, 22, 0, 120, 0], [0, 0, 0, -2048, 0], [0, 2, 0, -2047, 0], [0, 4, 0, -2044, 0], [0, 6, 0, -2039, 0], [0, 8, 0, -2032, 0], [0, 10, 0, -2023, 0], [0, 12, 0, -2012, 0], [0, 14, 0, -1999, 0], [0, 16, 0, -1984, 0], [0, 18, 0, -1967, 0], [0, 20, 0, -1948, 0], [0, 22, 0, -1927, 0], [0, 24, 0, -1904, 0], [0, 0, 0, -177147, 0], [0, 2, 0, -177146, 0], [0, 4, 0, -177143, 0], [0, 8, 0, -177131, 0], [0, 10, 0, -177122, 0], [0, 12, 0, -177111, 0], [0, 14, 0, -177098, 0], [0, 16, 0, -177083, 0], [0, 18, 0, -177066, 0], [0, 22, 0, -177026, 0], [0, 24, 0, -177003, 0], [0, 0, 0, -4194304, 0], [0, 2, 0, -4194303, 0], [0, 4, 0, -4194300, 0], [0, 6, 0, -4194295, 0], [0, 8, 0, -4194288, 0], [0, 10, 0, -4194279, 0], [0, 16, 0, -4194240, 0], [0, 18, 0, -4194223, 0], [0, 20, 0, -4194204, 0], [0, 22, 0, -4194183, 0], [0, 24, 0, -4194160, 0], [0, 0, 0, -48828125, 0], [0, 2, 0, -48828124, 0], [0, 4, 0, -48828121, 0], [0, 6, 0, -48828116, 0], [0, 8, 0, -48828109, 0], [0, 10, 0, -48828100, 0], [0, 12, 0, -48828089, 0], [0, 14, 0, -48828076, 0], [0, 16, 0, -48828061, 0], [0, 18, 0, -48828044, 0], [0, 20, 0, -48828025, 0], [0, 22, 0, -48828004, 0], [0, 24, 0, -48827981, 0], [0, 0, 0, -362797056, 0], [0, 2, 0, -362797055, 0], [0, 4, 0, -362797052, 0], [0, 6, 0, -362797047, 0], [0, 8, 0, -362797040, 0], [0, 10, 0, -362797031, 0], [0, 12, 0, -362797020, 0], [0, 14, 0, -362797007, 0], [0, 16, 0, -362796992, 0], [0, 18, 0, -362796975, 0], [0, 20, 0, -362796956, 0], [0, 22, 0, -362796935, 0], [0, 24, 0, -362796912, 0], [0, 0, 0, -1977326743, 0], [0, 2, 0, -1977326742, 0], [0, 4, 0, -1977326739, 0], [0, 6, 0, -1977326734, 0], [0, 8, 0, -1977326727, 0], [0, 10, 0, -1977326718, 0], [0, 12, 0, -1977326707, 0], [0, 14, 0, -1977326694, 0], [0, 16, 0, -1977326679, 0], [0, 18, 0, -1977326662, 0], [0, 20, 0, -1977326643, 0], [0, 22, 0, -1977326622, 0], [0, 24, 0, -1977326599, 0], [0, 0, 0, -8589934592, 0], [0, 2, 0, -8589934591, 0], [0, 4, 0, -8589934588, 0], [0, 6, 0, -8589934583, 0], [0, 8, 0, -8589934576, 0], [0, 10, 0, -8589934567, 0], [0, 12, 0, -8589934556, 0], [0, 14, 0, -8589934543, 0], [0, 16, 0, -8589934528, 0], [0, 18, 0, -8589934511, 0], [0, 20, 0, -8589934492, 0], [0, 22, 0, -8589934471, 0], [0, 24, 0, -8589934448, 0], [0, 0, 0, -31381059609, 0], [0, 2, 0, -31381059608, 0], [0, 4, 0, -31381059605, 0], [0, 6, 0, -31381059600, 0], [0, 10, 0, -31381059584, 0], [0, 12, 0, -31381059573, 0], [0, 14, 0, -31381059560, 0], [0, 16, 0, -31381059545, 0], [0, 20, 0, -31381059509, 0], [0, 22, 0, -31381059488, 0], [0, 24, 0, -31381059465, 0], [0, 0, 0, -100000000000, 0], [0, 2, 0, -99999999999, 0], [0, 6, 0, -99999999991, 0], [0, 8, 0, -99999999984, 0], [0, 10, 0, -99999999975, 0], [0, 12, 0, -99999999964, 0], [0, 14, 0, -99999999951, 0], [0, 16, 0, -99999999936, 0], [0, 18, 0, -99999999919, 0], [0, 20, 0, -99999999900, 0], [0, 24, 0, -99999999856, 0], [0, 0, 0, -285311670611, 0], [0, 2, 0, -285311670610, 0], [0, 4, 0, -285311670607, 0], [0, 6, 0, -285311670602, 0], [0, 8, 0, -285311670595, 0], [0, 10, 0, -285311670586, 0], [0, 12, 0, -285311670575, 0], [0, 14, 0, -285311670562, 0], [0, 16, 0, -285311670547, 0], [0, 18, 0, -285311670530, 0], [0, 20, 0, -285311670511, 0], [0, 22, 0, -285311670490, 0], [0, 24, 0, -285311670467, 0], [0, 0, 0, -743008370688, 0], [0, 2, 0, -743008370687, 0], [0, 4, 0, -743008370684, 0], [0, 6, 0, -743008370679, 0], [0, 8, 0, -743008370672, 0], [0, 12, 0, -743008370652, 0], [0, 14, 0, -743008370639, 0], [0, 18, 0, -743008370607, 0], [0, 20, 0, -743008370588, 0], [0, 22, 0, -743008370567, 0], [0, 24, 0, -743008370544, 0]]
[0, 4, 0, 3, 0]
[0, 22, 0, 120, 0]
[0, 12, 0, -2012, 0]
[0, 14, 0, -1999, 0]
[0, 12, 0, -177111, 0]
[0, 14, 0, -177098, 0]
[0, 4, 0, -4194300, 0]
[0, 6, 0, -4194295, 0]
[0, 8, 0, -4194288, 0]
[0, 18, 0, -4194223, 0]
[0, 20, 0, -4194204, 0]
[0, 22, 0, -4194183, 0]
[0, 4, 0, -48828121, 0]
[0, 22, 0, -48828004, 0]
[0, 10, 0, -362797031, 0]
[0, 16, 0, -362796992, 0]
[0, 8, 0, -1977326727, 0]
[0, 18, 0, -1977326662, 0]
[0, 2, 0, -8589934591, 0]
[0, 24, 0, -8589934448, 0]
[0, 10, 0, -31381059584, 0]
[0, 16, 0, -31381059545, 0]
[0, 2, 0, -99999999999, 0]
[0, 6, 0, -99999999991, 0]
[0, 10, 0, -99999999975, 0]
[0, 16, 0, -99999999936, 0]
[0, 20, 0, -99999999900, 0]
[0, 24, 0, -99999999856, 0]
[0, 6, 0, -285311670602, 0]
[0, 20, 0, -285311670511, 0]
[0, 2, 0, -743008370687, 0]
[0, 8, 0, -743008370672, 0]
[0, 12, 0, -743008370652, 0]
[0, 14, 0, -743008370639, 0]
[0, 18, 0, -743008370607, 0]
[0, 24, 0, -743008370544, 0]
C1S [1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12] C1T [2, 11, 6, 7, 6, 7, 2, 3, 4, 9, 10, 11, 2, 11, 5, 8, 4, 9, 1, 12, 5, 8, 1, 3, 5, 8, 10, 12, 3, 10, 1, 4, 6, 7, 9, 12]
D1 [3, 3, 3, 3, 1, 1, 7, 12, 6, 6, 12, 7, 9, 9, 1, 1, 1, 1, 9, 9, 9, 9, 10, 5, 8, 8, 5, 10, 3, 3, 2, 4, 11, 11, 4, 2]
G13= [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]


kk=-3
q=19
l=23
cl=-6
#根据B13中s和t的值得到的j=1时所有的椭圆曲线
BS=[5,7,10,11,14,15,17,19,20,21,22,1,2,3,4,6,8,9,12,13,16,18]
BT=[0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2]
Est=[]
F11=Integers(11)
for i in range(len(BS)):
    s=BS[i]
    t=BT[i]
    E=[0,2*t,0,t^2-s^11,0]#代入s和t得到的椭圆曲线
    Est.append(E)
print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


C1S=[]
C1T=[]
for j in range(len(Est)):
    F=GF(l)
    Est1=EllipticCurve(F,Est[j])
    alE=l+1-Est1.cardinality()#计算al（Est1）
    result=F11(alE-cl)
    if result==0:#判断Norm条件
        C1S.append(BS[j])
        C1T.append(BT[j])
        print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
print("C1S",C1S,"C1T",C1T)


D1=[]
for i in range(len(C1S)):
    s=C1S[i]
    t=C1T[i]
    d=Integers(l)(t^2-s^11)
    D1.append(d)
print("D1",D1)


G13= [1, 3, 5, 7, 9, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 387, 389, 391, 393, 395]
G23=[]
for k in range(len(G13)):
    b=G13[k]
    if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G23.append(b)
print("G23=",G23)

Est [[0, 0, 0, -48828125, 0], [0, 0, 0, -1977326743, 0], [0, 0, 0, -100000000000, 0], [0, 0, 0, -285311670611, 0], [0, 0, 0, -4049565169664, 0], [0, 0, 0, -8649755859375, 0], [0, 0, 0, -34271896307633, 0], [0, 0, 0, -116490258898219, 0], [0, 0, 0, -204800000000000, 0], [0, 0, 0, -350277500542221, 0], [0, 0, 0, -584318301411328, 0], [0, 4, 0, 3, 0], [0, 4, 0, -2044, 0], [0, 4, 0, -177143, 0], [0, 4, 0, -4194300, 0], [0, 4, 0, -362797052, 0], [0, 4, 0, -8589934588, 0], [0, 4, 0, -31381059605, 0], [0, 4, 0, -743008370684, 0], [0, 4, 0, -1792160394033, 0], [0, 4, 0, -17592186044412, 0], [0, 4, 0, -64268410079228, 0]]
C1S [] C1T []
D1 []
G23= []















kk=-3
q=19

L=[]
for i in range(len(divisors(396))):
    if Integers(2)(divisors(396)[i])==0 and is_prime(divisors(396)[i]+1) and divisors(396)[i]+1!=abs(kk) and divisors(396)[i]+1!=q and divisors(396)[i]+1<200:
        L.append(divisors(396)[i]+1)
print(q,'L=',L)

#求cl
f = Newforms(2^5*abs(kk)*q, names='a')
for i in range(12):
    C=f[i].padded_list(200)#求系数
    clf=[]
    for j in range(len(L)):
        l=L[j]
        clf.append(C[l])
    print('clf=',clf)

    l=5
    cl=clf[0]
    BS=[1,2,3,4]
    BT=[2,1,2,0]
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    D1=sorted(set(D1),key=D1.index)
    #print("D1",D1)

    G5=[]
    for b in range(396):
        if Integers(4)(kk*q^b)==1 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
            G5.append(b)
    print("G5=",G5)



    l=7
    cl=clf[1]
    BS=[1,2,3,4,5,6]#B5中s的值
    BT=[2,4,0,1,0,0]#B5中t的值
    Est=[]
    F11=Integers(11)
    for i in range(len(BS)):
        s=BS[i]
        t=BT[i]
        E=[0,2*t,0,s^11,0]#代入s和t得到的椭圆曲线
        Est.append(E)
    #print('Est',Est)#根据s和t的值得到的j=1时所有的椭圆曲线


    C1S=[]
    C1T=[]
    for j in range(len(Est)):
        F=GF(l)
        Est1=EllipticCurve(F,Est[j])
        alE=l+1-Est1.cardinality()#计算al（Est1）
        result=F11(alE-cl)
        if result==0:#判断Norm条件
            C1S.append(BS[j])
            C1T.append(BT[j])
            #print(Est[j])#得到满足Norm条件的曲线以及对应的s和t的值
    #print("C1S",C1S,"C1T",C1T)


    D1=[]
    for i in range(len(C1S)):
        s=C1S[i]
        t=C1T[i]
        d=Integers(l)(t^2-s^11)
        D1.append(d)
    #print("D1",D1)


    G7=[]
    for k in range(len(G5)):
        b=G5[k]
        if Integers(4)(kk*q^b)==3 and Integers(11)(b)!=0 and Integers(l)(kk*q^b) in D1:
                G7.append(b)
    print("G7",G7)

19 L= [5, 7, 13, 23, 37, 67, 199]
clf= [-2, 4, 2, 4, 2, 4, 12]
G5= []
G7 []
clf= [-1, -1, 0, 8, 4, -2, -17]
G5= []
G7 []
clf= [-1, 1, 4, 0, 4, 14, 17]
G5= []
G7 []
clf= [0, 0, 0, -6, 8, -8, -16]
G5= [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394]
G7 []
clf= [2, -4, -2, -6, -6, -4, 0]
G5= []
G7 []
clf= [3, -3, 0, 0, -4, 10, 5]
G5= []
G7 []
clf= [-2, -4, 2, -4, 2, -4, -12]
G5= []
G7 []
clf= [-1, -1, 4, 0, 4, -14, -17]
G5= []
G7 []
clf= [-1, 1, 0, -8, 4, 2, 17]
G5= []
G7 []
clf= [0, 0, 0, 6, 8, 8, 16]
G5= [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394]
G7 []
clf= [2, 4, -2, 6, -6, 4, 0]
G5= []
G7 []
clf= [3, 3, 0, 0, -4, -10, -5]
G5= []
G7 []